<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo+GitHub搭建静态博客平台(六)-使用Travis CI实现自动化部署]]></title>
    <url>%2F2018%2F03%2F05%2FHexo%2BGitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%2F2018-03-05-Hexo%2BGitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0(%E5%85%AD)%2F</url>
    <content type="text"><![CDATA[前言使用hexo + gitPages搭建好个人博客后，每当要发表一篇博文，第一步得手动使用hexo g命令生成静态网页，然后还得通过hexo d命令将静态文件推送到GitHub远程仓库，虽然不算繁琐且可以编写批处理命令进行简化，但是有更简单的，为何不用呢？。 我们可以通过 Travis CI 就能实现自动化构建自己的博客，我们只需将写好的Markdown格式的博文，我们将博文推送(push)到GitHub的时候，就可以触发自己编写好的脚本，实现自动化部署。 首先我们需要了解Travis CI分为两种： Travis CI .org for public repositories【公共仓库】 Travis CI .com for private repositories【私有仓库】 针对私有仓库的当然是收费的，接下来我们使用的是 Travis CI .org 。 Travis CI 自动化构建实现登录Travis CI.org首先我们使用GitHub账号登录 Travis CI .org ，然后我们我们就进入如下界面： 第一次进入可能下面没有你的仓库列表，我们可以点击右上角的Sync Account即可。 添加自动化构建仓库其实上图中已经看到了，我们将需要自动化构建仓库前面的开关打开即可！当然我们可以回到主页[点击网站图标]，然后进行如下操作： 然后也就跳转回你的Profile界面了，我们打开自己要实现自动化构建的仓库： 注意：需要是你的博客源码的仓库，我的博客源码与网站的静态文件是两个仓库，其实使用一个仓库，选用两个分支即可！ 设置仓库 我们需要打开下面的几个开关： 说明： Build only if .travis.yml is present：只有在.travis.yml文件中配置的分支改变了才构建 Build pushed branches：当推送完这个分支后开始构建 至此， 我们已经开启了要构建的仓库，但是构建完后，我们怎么将生成的文件推送到github上呢？ 我们使用Travis CI服务的目标是，我们只要将博文源文件推送到GitHub，Travis CI就自动构建并push静态文件到GitHub Pages！接下来，我们就是为Travis CI赋予操作GitHub的权利了！ GitHub生成Personal access tokens我们登录GitHub后进入设置界面，选择最下面的Developer settings： 接下来就是生成Personal access tokens： 我们需要为此赋予权限，此处我除了删除权限，其它一股脑都赋予了： 注意：Personal access tokens生成后会在上方显示出来，我们应当立即复制此秘钥，否则你将再也看不到了！ 在Travis CI配置Personal access tokens 当然，我们也可以在配置文件中书协自己的Personal access tokens，但是配置文件与源码是放在一起的，别人获得了此钥匙就相当于可以控制你的GitHub了，当然非常不安全，因此还是建议在网站上进行配置！ 编写配置文件配置文件的配置时非常灵活的，但是的主要目标 已经确定，所以配置基本上都一致。我们首先在博客的根目录下创建.travis.yml文件，下面是我的配置信息： 1234567891011121314151617181920language: node_jsnode_js:- "9" # nodejs的版本，查看命令 node -vbranches:only:- master # 设置自动化部署的源码分支# 安装依赖组件install:- npm install# 执行的命令script:- hexo clean- hexo generate# 执行的成功后执行after_success:- hexo deploy 至此，一切就绪！你可以编写一篇博文，然后推送到GitHub进行测试，如果你查看的比较快的话，你还可以看到Travis CI网页上执行的全过程，当然最终也可以看到其全貌！ 博文编号：20180305175456]]></content>
      <categories>
        <category>静态博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>静态博客</tag>
        <tag>Github</tag>
        <tag>Travis CI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+GitHub搭建静态博客平台(七)-常见问题]]></title>
    <url>%2F2018%2F01%2F30%2FHexo%2BGitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%2F2018-01-30-Hexo%2BGitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0(%E4%B8%83)%2F</url>
    <content type="text"><![CDATA[场景： 在使用hexo部署已写好的博客的时候出现 warning: LF will be replaced by CRLF ，虽然只是警告提交后正常，但是每一个文件都对应一个警告，长长的警告看着贼不顺眼。 注：我使用的平台是 Windows 8.1 windows中的换行符为 CRLF， 而在linux下的换行符为LF，产生这个问题的原因是Git的机制问题，具体怎么回事暂不了解。 解决方法： 1git config –global core.autocrlf false //禁用自动转换 如何设置「阅读全文」？在首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面是一个常见的需求。 NexT 提供三种方式来控制文章在首页的显示方式。 也就是说，在首页显示文章的摘录并显示 阅读全文 按钮，可以通过以下方法： 在文章中使用 &lt;!– more –&gt; 手动进行截断，Hexo 提供的方式 【推荐】 在文章的 front-matter 中添加 description，并提供文章摘录 自动形成摘要，在 主题配置文件 中添加： 123auto_excerpt:enable: truelength: 150 默认截取的长度为 150 字符，可以根据需要自行设定 建议使用 &lt;!– more –&gt;（即第一种方式），除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。博客编号：20180130172928]]></content>
      <categories>
        <category>静态博客搭建</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+GitHub搭建静态博客平台(五)-NexT主题配置]]></title>
    <url>%2F2018%2F01%2F28%2FHexo%2BGitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%2F2018-01-28-Hexo%2BGitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0(%E4%BA%94)%2F</url>
    <content type="text"><![CDATA[CSDN博客专栏：GitHub + Hexo 搭建博客平台 简介：深入剖析next主题的配置，包含设置RSS、添加标签页面、添加分类页面、设置字体、代码高亮、侧边栏、开启打赏功能、背景设置等。 设置 RSSNexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改 主题配置文件，设定 rss 字段的值： false：禁用 RSS，不在页面上显示 RSS 连接。 留空：使用 Hexo 生成的 Feed 链接。 你可以需要先安装 hexo-generator-feed 插件。 具体的链接地址：适用于已经烧制过 Feed 的情形。 安装1$ npm install hexo-generator-feed --save 配置修改 站点配置文件 : 1234feed:type: atompath: atom.xmllimit: 20 type - Feed type. (atom/rss2) path - Feed path. (Default: atom.xml/rss2.xml) limit - Maximum number of posts in the feed (Use 0 or false to show all posts) 添加「标签」页面包含标签的文章的例子： 123456---title: 标签测试文章tags:- Testing- Another Tag--- 新建页面在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 tags ： 12$ cd your-hexo-site$ hexo new page tags 设置页面类型编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下： 12345---title: 标签date: 2014-12-22 12:39:04type: "tags"--- 修改菜单在菜单中添加链接。编辑 主题配置文件 ， 添加 tags 到 menu 中，如下: 1234menu:home: /archives: /archivestags: /tags 注意：如果有集成评论服务，页面也会带有评论。 若需要关闭的话，请添加字段 comments 并将值设置为 false，如： 123456---title: 标签date: 2014-12-22 12:39:04type: "tags"comments: false--- 添加「分类」页面包含分类的文章的例子： 1234---title: 分类测试文章categories: Testing--- 新建页面在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 categories ： 12$ cd your-hexo-site$ hexo new page categories 设置页面类型编辑刚新建的页面，将页面的 type 设置为 categories ，主题将自动为这个页面显示分类。页面内容如下： 12345---title: 分类date: 2014-12-22 12:39:04type: "categories"--- 修改菜单在菜单中添加链接。编辑 主题配置文件 ， 添加 categories 到 menu 中，如下: 1234menu:home: /archives: /archivescategories: /categories 注意：如果有集成评论服务，页面也会带有评论。 若需要关闭的话，请添加字段 comments 并将值设置为 false，如： 123456---title: 分类date: 2014-12-22 12:39:04type: "categories"comments: false--- 设置字体 注意： 此特性在版本 5.0.1 中引入，要使用此功能请确保所使用的 NexT 版本在此之后 为了解决 Google Fonts API 不稳定的问题，NexT 在 5.0.1 中引入此特性。 通过此特性，你可以指定所使用的字体库外链地址；与此同时，NexT 开放了 5 个特定范围的字体设定，他们是： 全局字体：定义的字体将在全站范围使用 标题字体：文章内标题的字体（h1, h2, h3, h4, h5, h6） 文章字体：文章所使用的字体 Logo字体：Logo 所使用的字体 代码字体： 代码块所使用的字体 各项所指定的字体将作为首选字体，当他们不可用时会自动 Fallback 到 NexT 设定的基础字体组： 非代码类字体：Fallback 到 “PingFang SC”, “Microsoft YaHei”, sans-serif 代码类字体： Fallback 到 consolas, Menlo, “PingFang SC”, “Microsoft YaHei”, monospace 另外，每一项都有一个额外的 external 属性，此属性用来控制是否使用外链字体库。 开放此属性方便你设定那些已经安装在系统中的字体，减少不必要的请求（请求大小）。 配置示例： 12345678910111213141516171819202122232425262728293031font:enable: true# 外链字体库地址，例如 //fonts.googleapis.com (默认值)host:# 全局字体，应用在 body 元素上global:external: truefamily: Monda# 标题字体 (h1, h2, h3, h4, h5, h6)headings:external: truefamily: Roboto Slab# 文章字体posts:external: truefamily:# Logo 字体logo:external: truefamily: Lobster Twosize: 24# 代码字体，应用于 code 以及代码块codes:external: truefamily: PT Mono 设置代码高亮主题NexT 使用 Tomorrow Theme 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties： 更改 highlight_theme 字段，将其值设定成你所喜爱的高亮主题，例如： 1234# Code Highlight theme# Available value: normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: normal 侧边栏社交链接侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在 主题配置文件 中。 &lt;1&gt; 链接放置在 social 字段下，一行一个链接。其键值格式是 显示文本: 链接地址。 12345678# Social linkssocial:GitHub: https://github.com/your-user-nameTwitter: https://twitter.com/your-user-name微博: http://weibo.com/your-user-name豆瓣: http://douban.com/people/your-user-name知乎: http://www.zhihu.com/people/your-user-name# 等等 &lt;2&gt; 设定链接的图标，对应的字段是 social_icons。其键值格式是 匹配键: Font Awesome 图标名称， 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。 1234567# Social Iconssocial_icons:enable: true# Icon MappingsGitHub: githubTwitter: twitter微博: weibo 开启打赏功能越来越多的平台（微信公众平台，新浪微博，简书，百度打赏等）支持打赏功能，付费阅读时代越来越近，特此增加了打赏功能，支持微信打赏和支付宝打赏。 只需要 主题配置文件 中填入 微信 和 支付宝 收款二维码图片地址即可开启该功能。 打赏功能配置示例： 123reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！wechatpay: /path/to/wechat-reward-imagealipay: /path/to/alipay-reward-image 友情链接编辑 主题配置文件 添加： 12345# titlelinks_title: Linkslinks:MacTalk: http://macshuo.com/Title: http://example.com/ 腾讯公益404页面腾讯公益404页面，寻找丢失儿童，让大家一起关注此项公益事业！效果如下 http://www.ixirong.com/404.html 使用方法，新建 404.html 页面，放到主题的 source 目录下，内容如下： 123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html;charset=utf-8;"/&gt;&lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt;&lt;meta name="robots" content="all" /&gt;&lt;meta name="robots" content="index,follow"/&gt;&lt;link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"&gt;&lt;/head&gt;&lt;body&gt;&lt;script type="text/plain" src="http://www.qq.com/404/search_children.js"charset="utf-8" homePageUrl="/"homePageName="回到我的主页"&gt;&lt;/script&gt;&lt;script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"&gt;&lt;/script&gt;&lt;script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 注：因为404页面只能绑定顶级域名，我的博客，没买也没绑定域名，所以才不会有效果。 站点建立时间这个时间将在站点的底部显示，例如 © 2013 - 2015。 编辑 主题配置文件，新增字段 since。 1since: 2013 订阅微信公众号 注意： 此特性在版本 5.0.1 中引入，要使用此功能请确保所使用的 NexT 版本在此之后 在每篇文章的末尾显示微信公众号二维码，扫一扫，轻松订阅博客。 在微信公众号平台下载您的二维码，并将它存放于博客source/uploads/目录下。 然后编辑 主题配置文件，如下： 12345# Wechat Subscriberwechat_subscriber:enabled: trueqcode: /uploads/wechat-qcode.jpgdescription: 欢迎您扫一扫上面的微信公众号，订阅我的博客！ 设置「动画效果」NexT 默认开启动画效果，效果使用 JavaScript 编写，因此需要等待 JavaScript 脚本完全加载完毕后才会显示内容。 如果您比较在乎速度，可以将设置此字段的值为 false 来关闭动画。 编辑 主题配置文件， 搜索 use_motion，根据您的需求设置值为 true 或者 false 即可： 12use_motion: true # 开启动画效果use_motion: false # 关闭动画效果 设置「背景动画」NexT 自带两种背景动画效果 编辑 主题配置文件， 搜索 canvas_nest 或 three_waves，根据您的需求设置值为 true 或者 false 即可： 123# canvas_nest 配置示例canvas_nest: true //开启动画canvas_nest: false //关闭动画 123# three_waves 配置示例three_waves: true //开启动画three_waves: false //关闭动画 如何设置「阅读全文」在首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面是一个常见的需求。 NexT 提供三种方式来控制文章在首页的显示方式。 也就是说，在首页显示文章的摘录并显示 阅读全文 按钮，可以通过以下方法： 在文章中使用 手动进行截断，Hexo 提供的方式【推荐】 在文章的 front-matter 中添加 description，并提供文章摘录 自动形成摘要，在 主题配置文件 中添加： 123auto_excerpt:enable: truelength: 150 默认截取的长度为 150 字符，可以根据需要自行设定 建议使用 &lt;!-- more --&gt;（即第一种方式），除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。 博客编号：20180121073403]]></content>
      <categories>
        <category>静态博客搭建</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
        <tag>静态博客</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+GitHub搭建静态博客平台(四)-Hexo基本操作]]></title>
    <url>%2F2018%2F01%2F28%2FHexo%2BGitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%2F2018-01-28-Hexo%2BGitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0(%E5%9B%9B)%2F</url>
    <content type="text"><![CDATA[CSDN博客专栏：GitHub + Hexo 搭建博客平台 写作你可以执行下列命令来创建一篇新文章： 1$ hexo new [layout] &lt;title&gt; 您可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。 布局（Layout）Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。 布局 路径 post source/_posts page source draft source/_drafts 不要处理我的文章如果你不想你的文章被处理，你可以将 Front-Matter 中的layout: 设为 false 。 文件名称Hexo 默认以标题做为文件名称，但您可编辑 new_post_name 参数来改变默认的文件名称，举例来说，设为 :year-:month-:day-:title.md 可让您更方便的通过日期来管理文章。 变量 描述 :title 标题（小写，空格将会被替换为短杠） :year 建立的年份，比如， 2015 :month 建立的月份（有前导零），比如， 04 :i_month 建立的月份（无前导零），比如， 4 :day 建立的日期（有前导零），比如， 07 :i_day 建立的日期（无前导零），比如， 7 草稿刚刚提到了 Hexo 的一种特殊布局：draft，这种布局在建立时会被保存到 source/_drafts 文件夹，您可通过 publish 命令将草稿移动到 source/_posts 文件夹，该命令的使用方式与 new 十分类似，您也可在命令中指定 layout 来指定布局。 1$ hexo publish [layout] &lt;title&gt; 草稿默认不会显示在页面中，您可在执行时加上 --draft 参数，或是把 render_drafts 参数设为 true 来预览草稿。 模版（Scaffold）在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如： 1$ hexo new photo "My Gallery" 在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章，以下是您可以在模版中使用的变量： 变量 描述 layout 布局 title 标题 date 文件建立日期 Front-matterFront-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，举例来说： 1234---title: Hello Worlddate: 2013/7/13 20:46:25--- 以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。 参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 分类和标签只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。 分类方法的分歧:通常分类可以是同级的，也可以是父子分类。但是Hexo不支持指定多个同级分类。 下面的指定方法：categories: Diary Life会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。 JSON Front-matter除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 --- 代换成 ;;; 即可。 标签插件（Tag Plugins）[非重点]声明：功能非常强大，但是简书以及CSDN不支持，为了保证通用性，此功能不详细深入。如果想详细了解可参考《标签插件》。 标签插件 和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。 引用块在文章中插入引言，可包含作者、来源和标题。 别号： quote 123&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;content&#123;% endblockquote %&#125; 代码块在文章中插入代码。 别名： code 123&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;code snippet&#123;% endcodeblock %&#125; Pull Quote在文章中插入 Pull quote。 123&#123;% pullquote [class] %&#125;content&#123;% endpullquote %&#125; jsFiddle在文章中嵌入 jsFiddle。 1&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125; Gist在文章中嵌入 Gist。 1&#123;% gist gist_id [filename] %&#125; iframe在文章中插入 iframe。 1&#123;% iframe url [width] [height] %&#125; Image在文章中插入指定大小的图片。 1&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125; Link在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。 1&#123;% link text url [external] [title] %&#125; Include Code插入 source 文件夹内的代码文件。 1&#123;% include_code [title] [lang:language] path/to/file %&#125; Youtube在文章中插入 Youtube 视频。 1&#123;% youtube video_id %&#125; Vimeo在文章中插入 Vimeo 视频。 1&#123;% vimeo video_id %&#125; 引用文章引用其他文章的链接。 12&#123;% post_path slug %&#125;&#123;% post_link slug [title] %&#125; 引用资源引用文章的资源。 123&#123;% asset_path slug %&#125;&#123;% asset_img slug [title] %&#125;&#123;% asset_link slug [title] %&#125; Raw如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。 123&#123;% raw %&#125;content&#123;% endraw %&#125; 资源文件夹资源（Asset）代表 source 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 source/images 文件夹中。然后通过类似于！[](/images/image.jpg)的方法访问它们。 相对路径引用的标签插件通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。 123&#123;% asset_path slug %&#125;&#123;% asset_img slug [title] %&#125;&#123;% asset_link slug [title] %&#125; 比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 ![](/example.jpg) ，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作） 正确的引用图片方式是使用下列的标签插件而不是 markdown ： 1&#123;% asset_img example.jpg This is an example image %&#125; 通过这种方式，图片将会同时出现在文章和主页以及归档页中。 数据文件有时您可能需要在主题中使用某些资料，而这些资料并不在文章内，并且是需要重复使用的，那么您可以考虑使用 Hexo 3.0 新增的「数据文件」功能。此功能会载入 source/_data 内的 YAML 或 JSON 文件，如此一来您便能在网站中复用这些文件了。 举例来说，在 source/_data 文件夹中新建 menu.yml 文件： 123Home: /Gallery: /gallery/Archives: /archives/ 您就能在模板中使用这些资料： 123&lt;% for (var link in site.data.menu) &#123; %&gt;&lt;a href=&quot;&lt;%= site.data.menu[link] %&gt;&quot;&gt; &lt;%= link %&gt; &lt;/a&gt;&lt;% &#125; %&gt; 渲染结果如下 : 123&lt;a href=&quot;/&quot;&gt; Home &lt;/a&gt;&lt;a href=&quot;/gallery/&quot;&gt; Gallery &lt;/a&gt;&lt;a href=&quot;/archives/&quot;&gt; Archives &lt;/a&gt; 服务器hexo-serverHexo 3.0 把服务器独立成了个别模块，您必须先安装 hexo-server 才能使用。 1$ npm install hexo-server --save 安装完成后，输入以下命令以启动服务器，您的网站会在 http://localhost:4000 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。 1$ hexo server 如果您想要更改端口，或是在执行时遇到了 EADDRINUSE 错误，可以在执行时使用 -p 选项指定其他端口，如下： 1$ hexo server -p 5000 静态模式在静态模式下，服务器只处理 public 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 hexo generate，此模式通常用于生产环境（production mode）下。 1$ hexo server -s 自定义 IP服务器默认运行在 0.0.0.0，您可以覆盖默认的 IP 设置，如下： 1$ hexo server -i 192.168.1.1 指定这个参数后，您就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的 127.0.0.1 外，通常还有一个 192.168.*.* 的局域网IP，如果像上面那样使用 -i 参数，就不能用 127.0.0.1 来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为 -i 参数的值，那么就无法通过公网来访问站点。 PowPow 是一个 Mac 系统上的零配置 Rack 服务器，它也可以作为一个简单易用的静态文件服务器来使用。 安装1$ curl get.pow.cx | sh 设置在 ~/.pow 文件夹建立链接（symlink）。 12$ cd ~/.pow$ ln -s /path/to/myapp 您的网站将会在 http://myapp.dev 下运行，网址根据链接名称而定。 生成器使用 Hexo 生成静态文件快速而且简单。 1$ hexo generate 监视文件变动Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。 1$ hexo generate --watch 完成后部署您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。 12$ hexo generate --deploy$ hexo deploy --generate 上面两个命令可以简写为: 12$ hexo g -d$ hexo d -g 部署Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。 1$ hexo deploy 在开始之前，您必须先在_config.yml 中修改参数，一个正确的部署配置中至少要有 type 参数，例如： 12deploy:type: git 您可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。 12345deploy:- type: gitrepo:- type: herokurepo: 缩进 YAML依靠缩进来确定元素间的从属关系。因此，请确保每个deployer的缩进长度相同，并且使用空格缩进。 Git安装 hexo-deployer-git。 1$ npm install hexo-deployer-git --save 修改 站点配置文件 : 12345deploy:type: gitrepo: &lt;repository url&gt;branch: [branch]message: [message] Hexo 生成的所有文件都放在 public 文件夹中，您可以将它们复制到您喜欢的地方。 而Heroku、Rsync、OpenShift、FTPSync的部署可以参考《部署》。 博客编号：20180120090713]]></content>
      <categories>
        <category>静态博客搭建</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+GitHub搭建静态博客平台(三)-Next主题基本使用]]></title>
    <url>%2F2018%2F01%2F27%2FHexo%2BGitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%2F2018-01-27-Hexo%2BGitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0(%E4%B8%89)%2F</url>
    <content type="text"><![CDATA[CSDN博客专栏：GitHub + Hexo 搭建博客平台 博客网站搭建好后就是为自己的网站设置一个美观的主题了， hexo 官方提供了许多官方主题,还有许多别人编写的主题，例如：hexo-theme-jekyll 和 hexo-theme-yilia。还有很多就不一一列举了，我将介绍也是我将使用的是 Next主题 。 导入并使用主题导入主题的方式很简单，有两种： 进入博客根目录 /themes/ , 执行 $git clone ... 命令，将主题克隆下来 直接将主题下载并解压到博客根目录 /themes/ 为了简洁些我们将其目录重命名为next。配置主题时，我们需要修改博客根目录的 _config.yml 中的默认 theme: landscape改为 theme: 使用主题就可以了。然后我们就可以正常启动博客，来验证主题是否应用成功了。 注意：修改 theme: 的时候后面必须有一个空格。 Next主题的使用Next的官方网址为：http://theme-next.iissnan.com/ 在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。 主题设定 主题的配置文件修改时会自动更新，因此无需重启服务器。 选择 SchemeScheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是： Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 Mist - Muse 的紧凑版本，整洁有序的单栏外观 Pisces - 双栏 Scheme，小家碧玉似的清新 Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。 设置语言编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下： 1language: zh-Hans 目前 NexT 支持的语言如以下表格所示： 语言 代码 设定示例 English en language: en 简体中文 zh-Hans language: zh-Hans Français fr-FR language: fr-FR Português pt language: pt or language: pt-BR 繁體中文 zh-hk 或者 zh-tw language: zh-hk Русский язык ru language: ru Deutsch de language: de 日本語 ja language: ja Indonesian id language: id Korean ko language: ko 设置菜单菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 Font Awesome 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下 图标模糊的问题。 编辑 主题配置文件，修改以下内容： &lt;1&gt; 设置菜单项 设定菜单内容, 对应的字段是 menu。 菜单内容的设置格式是：item name: link。其中 item name 是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。 1234567menu:home: /archives: /archives#about: /about#categories: /categoriestags: /tags#commonweal: /404.html 若你的站点运行在子目录中，请将链接前缀的 / 去掉 NexT 默认的菜单项有（标注 ♠ 的项表示需要手动创建这个页面）： 键值 设定值 显示文本（简体中文） home home: / 主页 archives archives: /archives 归档页 categories categories: /categories 分类页 ♠ tags tags: /tags 标签页 ♠ about about: /about 关于页面 ♠ commonweal commonweal: /404.html 公益 404 ♠ &lt;2&gt; 设置菜单项的显示文本。 在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用这个名称查找对应的语言翻译，并提取显示文本。因为我们设置为简体中文，因此会自动进行翻译。这些翻译文本放置在 NexT 主题目录下的 languages/{language}.yml （{language} 为你所使用的语言）。 以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件languages/zh-Hans.yml，在 menu 字段下添加一项： 123456789menu:home: 首页archives: 归档categories: 分类tags: 标签about: 关于search: 搜索commonweal: 公益404something: 有料 &lt;3&gt; 设定菜单项的图标 设定菜单项的图标，对应的字段是 menu_icons。 此设定格式是 item name: icon name，其中 item name 与上一步所配置的菜单名字对应，icon name 是 Font Awesome 图标的名字。而 enable 可用于控制是否显示图标，你可以设置成 false 来去掉图标。 123456789menu_icons:enable: true# Icon Mapping.home: homeabout: usercategories: thtags: tagsarchives: archivecommonweal: heartbeat 在菜单图标开启的情况下，如果菜单项与菜单未匹配（没有设置或者无效的 Font Awesome 图标名字） 的情况下，NexT 将会使用 ? 作为图标。 请注意键值（如 home）的大小写要严格匹配 设置侧栏默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 主题配置文件 中的 sidebar 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。 &lt;1&gt; 设置侧栏的位置 修改 sidebar.position 的值，支持的选项有： left - 靠左放置 right - 靠右放置 12sidebar:position: left &lt;2&gt; 设置侧栏显示的时机 修改 sidebar.display 的值，支持的选项有： post - 默认行为，在文章页面（拥有目录列表）时显示 always - 在所有页面中都显示 hide - 在所有页面中都隐藏（可以手动展开） remove - 完全移除 设置头像编辑 主题配置文件，修改字段avatar， 值设置成头像的链接地址。其中，头像的链接地址可以是： 集成常用的第三方服务详见：第三方服务集成 百度统计 注意： baidu_analytics 不是你的百度 id 或者 百度统计 id &lt;1&gt; 登录 百度统计， 定位到站点的代码获取页面 &lt;2&gt; 复制 hm.js? 后面那串统计脚本 id，如： &lt;3&gt; 编辑 主题配置文件， 修改字段 baidu_analytics 字段，值设置成你的百度统计脚本 id。 阅读次数统计（LeanCloud）在注册完成 LeanCloud 帐号并验证邮箱之后，我们就可以登录我们的 LeanCloud 帐号，进行一番配置之后拿到 AppID 以及 AppKey 这两个参数即可正常使用文章阅读量统计的功能了。 登录 LeanCloud ，然后新建一个 应用 来专门进行博客的访问统计的数据操作。新建的 应用 名称我们可以随意输入，即便是输入的不满意我们后续也是可以更改的: 我创建的应用的名称为 fxb_LeanCloud 创建完成之后我们点击新创建的应用的名字来进行该应用的参数配置: 在应用的数据配置界面，左侧下划线开头的都是系统预定义好的表，为了便于区分我们新建一张表来保存我们的数据。点击左侧右上角的图标，新建Class： 注意：此处的新建 Class名字必须 为 Counter 。 由于LeanCloud升级了默认的ACL权限，如果你想避免后续因为权限的问题导致次数统计显示不正常，建议在此处选择 无限制 。 创建完成之后，左侧数据栏应该会多出一栏名为 Counter 的栏目。接下来我们获取应用的 AppID 以及 AppKey ，有了它们，我们就有权限能够通过主题中配置好的Javascript代码与这个应用的Counter表进行数据存取操作了: 复制 AppID 以及 AppKey 并在 NexT主题 的 _config.yml 文件中我们相应的位置填入即可，正确配置之后文件内容像这个样子: 1234leancloud_visitors:enable: trueapp_id: ***joaeuuc4h***app_key: ***E9UJsJpw1o*** 这个时候重新生成部署Hexo博客，应该就可以正常使用文章阅读量统计的功能了。 需要特别说明的是： 记录文章访问量的唯一标识符是文章的发布日期以及文章的标题，因此请确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计。 Web安全因为 AppID 以及 AppKey 是暴露在外的，因此如果一些别有用心之人知道了之后用于其它目的是得不偿失的，为了确保只用于我们自己的博客，建议开启Web安全选项，这样就只能通过我们自己的域名才有权访问后台的数据了，可以进一步提升安全性。 选择应用的设置的安全中心选项卡： 如果你不知道怎么填写安全域名而或者填写完成之后发现博客文章访问量显示不正常，打开浏览器调试模式，发现如下图的输出: 这说明你的安全域名填写错误，导致服务器拒绝了数据交互的请求，你可以更改为正确的安全域名。 后台管理当你配置部分完成之后，初始的文章统计量显示为0，但是这个时候我们 应用的 Counter 表中并没有相应的记录，只是单纯的显示为0而已，当博客文章在配置好阅读量统计服务之后第一次打开时，便会自动向服务器发送数据来创建一条数据，该数据会被记录在对应的应用的 Counter 表中。 Local Search【本地搜索】安装 hexo-generator-searchdb，在站点的根目录下执行以下命令： 1$ npm install hexo-generator-searchdb --save 编辑 站点配置文件，新增以下内容到任意位置： 12345search:path: search.xmlfield: postformat: htmllimit: 10000 编辑 主题配置文件，启用本地搜索功能： 123# Local searchlocal_search:enable: true 评论系统 - 来必力登陆 来必力 获取你的 LiveRe UID。编辑 主题配置文件， 编辑 livere_uid 字段，设置如下： 1livere_uid: #your livere_uid LiveRe 有两个版本： City版：是一款适合所有人使用的免费版本； Premium版：是一款能够帮助企业实现自动化管理的多功能收费版本。 第一步安装： 第二步填写信息： 第三步获取UID： 内容分享服务JiaThis编辑 主题配置文件， 添加/修改字段 jiathis，值为 true。 12# JiaThis 分享服务jiathis: true 百度分享编辑 主题配置文件，添加/修改字段baidushare，值为 true。 12baidushare:type: button #百度分享展示的方式button|slide 问题待解决：分享服务本地浏览正常，部署到GitHub上后失效！ 当前解决状态： 查看网页生成网址源码，与分享服务提供的源码基本一致。但仍无法执行，我将JiaThis或百度分享的代码直接贴到hexo生成文件中也是这种情况。 暂时理解： 可能是JavaScript加载问题导致的，因为其文字加载正常，但是后续出现问题！ 解决帮助： next的分享代码生成在文件夹：themes → next → layout → _partials → share 博客编号：20180120084123]]></content>
      <categories>
        <category>静态博客搭建</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
        <tag>静态博客</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+GitHub搭建静态博客平台(二)-配置网站及使用]]></title>
    <url>%2F2018%2F01%2F27%2FHexo%2BGitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%2F2018-01-27-Hexo%2BGitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0(%E4%BA%8C)%2F</url>
    <content type="text"><![CDATA[CSDN博客专栏：GitHub + Hexo 搭建博客平台 配置网站我们可以在 _config.yml 文件中修改大部份的配置。 注意：此篇博文中讲解的是配置的含义，而详细的配置将在接下来的博文中进行介绍。 网站 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 author 您的名字 language 网站使用的语言 timezone 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 其中， description 主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。 author 参数用于主题显示文章的作者。 timezone 建议保持默认即可。 网址 参数 描述 默认值 url 网址 root 网站根目录 permalink 文章的 永久链接 格式 :year/:month/:day/:title/ permalink_defaults 永久链接中各部分的默认值 网站存放在子目录 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 目录 参数 描述 默认值 source_dir 资源文件夹，这个文件夹用来存放内容。 source public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。 public tag_dir 标签文件夹 tags archive_dir 归档文件夹 archives category_dir 分类文件夹 categories code_dir Include code 文件夹 downloads/code i18n_dir 国际化（i18n）文件夹 :lang skip_render 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 提示:如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。 文章 参数 描述 默认值 new_post_name 新文章的文件名称 :title.md default_layout 预设布局 post auto_spacing 在中文和英文之间加入空格 false titlecase 把标题转换为 title case false external_link 在新标签中打开链接 true filename_case 把文件名称转换为 (1) 小写或 (2) 大写 0 render_drafts 显示草稿 false post_asset_folder 启动 Asset 文件夹 false relative_link 把链接改为与根目录的相对位址 false future 显示未来的文章 true highlight 代码块的设置 相对地址 默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为 example.com ,您有一篇文章名为 hello ，那么绝对链接可能像这样： http://example.com/hello.html ，它是绝对于域名的。相对链接像这样： /hello.html ，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。 分类 &amp; 标签 参数 描述 默认值 default_category 默认分类 uncategorized category_map 分类别名 tag_map 标签别名 日期 / 时间格式Hexo 使用 Moment.js 来解析和显示时间。 参数 描述 默认值 date_format 日期格式 YYYY-MM-DD time_format 时间格式 H:mm:ss 分页 参数 描述 默认值 per_page 每页显示的文章量 (0 = 关闭分页功能) 10 pagination_dir 分页目录 page 扩展 参数 描述 theme 当前主题名称。值为false时禁用主题 deploy 部署部分的设置 指令init1$ hexo init [folder] 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 new1$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 generate1$ hexo generate 生成静态文件。 选项 描述 -d, –deploy 文件生成后立即部署网站 -w, –watch 监视文件变动 该命令可以简写为 1$ hexo g publish1$ hexo publish [layout] &lt;filename&gt; 发表草稿。 server1$ hexo server 启动服务器。默认情况下，访问网址为： http://localhost:4000/。 选项 描述 -p, –port 重设端口 -s, –static 只使用静态文件 -l, –log 启动日记记录，使用覆盖记录格式 deploy1$ hexo deploy 部署网站。 参数 描述 -g, –generate 部署之前预先生成静态文件 该命令可以简写为： 1$ hexo d render1$ hexo render &lt;file1&gt; [file2] ... 渲染文件。 参数 描述 -o, –output 设置输出路径 migrate1$ hexo migrate &lt;type&gt; 从其他博客系统 迁移内容。 clean1$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 list1$ hexo list &lt;type&gt; 列出网站资料。 version1$ hexo version 显示 Hexo 版本。 选项安全模式1$ hexo --safe 在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。 调试模式1$ hexo --debug 在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。 简洁模式1$ hexo --silent 隐藏终端信息。 自定义配置文件的路径1$ hexo --config custom.yml 自定义配置文件的路径，执行后将不再使用 _config.yml。 显示草稿1$ hexo --draft 显示 source/_drafts 文件夹中的草稿文章。 自定义 CWD1$ hexo --cwd /path/to/cwd 自定义当前工作目录（Current working directory）的路径。 博客迁移注意：我只接触过Jekyll，其它的没有接触，因此在此只写明迁移Jekyll的方法，更多详见《迁移》。 把 _posts 文件夹内的所有文件复制到 source/_posts 文件夹，并在 _config.yml 中修改 new_post_name 参数。 1new_post_name: :year-:month-:day-:title.md 博客编号：20180120074123]]></content>
      <categories>
        <category>静态博客搭建</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+GitHub搭建静态博客平台(一)-环境配置及建站]]></title>
    <url>%2F2018%2F01%2F27%2FHexo%2BGitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%2F2018-01-27-Hexo%2BGitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0(%E4%B8%80)%2F</url>
    <content type="text"><![CDATA[CSDN博客专栏：GitHub + Hexo 搭建博客平台 配置网站我们可以在 _config.yml 文件中修改大部份的配置。 注意：此篇博文中讲解的是配置的含义，而详细的配置将在接下来的博文中进行介绍。 网站 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 author 您的名字 language 网站使用的语言 timezone 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 其中， description 主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。 author 参数用于主题显示文章的作者。 timezone 建议保持默认即可。 网址 参数 描述 默认值 url 网址 root 网站根目录 permalink 文章的 永久链接 格式 :year/:month/:day/:title/ permalink_defaults 永久链接中各部分的默认值 网站存放在子目录 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 目录 参数 描述 默认值 source_dir 资源文件夹，这个文件夹用来存放内容。 source public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。 public tag_dir 标签文件夹 tags archive_dir 归档文件夹 archives category_dir 分类文件夹 categories code_dir Include code 文件夹 downloads/code i18n_dir 国际化（i18n）文件夹 :lang skip_render 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 提示:如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。 文章 参数 描述 默认值 new_post_name 新文章的文件名称 :title.md default_layout 预设布局 post auto_spacing 在中文和英文之间加入空格 false titlecase 把标题转换为 title case false external_link 在新标签中打开链接 true filename_case 把文件名称转换为 (1) 小写或 (2) 大写 0 render_drafts 显示草稿 false post_asset_folder 启动 Asset 文件夹 false relative_link 把链接改为与根目录的相对位址 false future 显示未来的文章 true highlight 代码块的设置 相对地址 默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为 example.com ,您有一篇文章名为 hello ，那么绝对链接可能像这样： http://example.com/hello.html ，它是绝对于域名的。相对链接像这样： /hello.html ，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。 分类 &amp; 标签 参数 描述 默认值 default_category 默认分类 uncategorized category_map 分类别名 tag_map 标签别名 日期 / 时间格式Hexo 使用 Moment.js 来解析和显示时间。 参数 描述 默认值 date_format 日期格式 YYYY-MM-DD time_format 时间格式 H:mm:ss 分页 参数 描述 默认值 per_page 每页显示的文章量 (0 = 关闭分页功能) 10 pagination_dir 分页目录 page 扩展 参数 描述 theme 当前主题名称。值为false时禁用主题 deploy 部署部分的设置 指令init1$ hexo init [folder] 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 new1$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 generate1$ hexo generate 生成静态文件。 选项 描述 -d, –deploy 文件生成后立即部署网站 -w, –watch 监视文件变动 该命令可以简写为 1$ hexo g publish1$ hexo publish [layout] &lt;filename&gt; 发表草稿。 server1$ hexo server 启动服务器。默认情况下，访问网址为： http://localhost:4000/。 选项 描述 -p, –port 重设端口 -s, –static 只使用静态文件 -l, –log 启动日记记录，使用覆盖记录格式 deploy1$ hexo deploy 部署网站。 参数 描述 -g, –generate 部署之前预先生成静态文件 该命令可以简写为： 1$ hexo d render1$ hexo render &lt;file1&gt; [file2] ... 渲染文件。 参数 描述 -o, –output 设置输出路径 migrate1$ hexo migrate &lt;type&gt; 从其他博客系统 迁移内容。 clean1$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 list1$ hexo list &lt;type&gt; 列出网站资料。 version1$ hexo version 显示 Hexo 版本。 选项安全模式1$ hexo --safe 在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。 调试模式1$ hexo --debug 在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。 简洁模式1$ hexo --silent 隐藏终端信息。 自定义配置文件的路径1$ hexo --config custom.yml 自定义配置文件的路径，执行后将不再使用 _config.yml。 显示草稿1$ hexo --draft 显示 source/_drafts 文件夹中的草稿文章。 自定义 CWD1$ hexo --cwd /path/to/cwd 自定义当前工作目录（Current working directory）的路径。 博客迁移注意：我只接触过Jekyll，其它的没有接触，因此在此只写明迁移Jekyll的方法，更多详见《迁移》。 把 _posts 文件夹内的所有文件复制到 source/_posts 文件夹，并在 _config.yml 中修改 new_post_name 参数。 1new_post_name: :year-:month-:day-:title.md 博客编号：20180120074123]]></content>
      <categories>
        <category>静态博客搭建</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
        <tag>静态博客</tag>
      </tags>
  </entry>
</search>
